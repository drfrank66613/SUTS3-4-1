// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using P4.Misc;

namespace P5.Migrations
{
    [DbContext(typeof(Database))]
    partial class DatabaseModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.10")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("P4.Model.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BasketStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustId")
                        .HasColumnType("int");

                    b.HasKey("BasketId");

                    b.HasIndex("CustId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("P4.Model.BasketWithProduct", b =>
                {
                    b.Property<int>("BasketId")
                        .HasColumnType("int");

                    b.Property<int>("ProdId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("BasketId", "ProdId");

                    b.HasIndex("ProdId");

                    b.ToTable("BasketWithProducts");
                });

            modelBuilder.Entity("P4.Model.Customer", b =>
                {
                    b.Property<int>("CustId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CustName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustPassword")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CustId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustId = 1,
                            CustName = "Customer1",
                            CustPassword = "123123"
                        },
                        new
                        {
                            CustId = 2,
                            CustName = "Customer2",
                            CustPassword = "123123"
                        },
                        new
                        {
                            CustId = 3,
                            CustName = "Customer3",
                            CustPassword = "123123"
                        });
                });

            modelBuilder.Entity("P4.Model.Feedback", b =>
                {
                    b.Property<int>("FeedId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustId")
                        .HasColumnType("int");

                    b.Property<string>("FeedBody")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeedId");

                    b.HasIndex("CustId");

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("P4.Model.Product", b =>
                {
                    b.Property<int>("ProdId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ProdName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("ProdPrice")
                        .HasColumnType("float");

                    b.HasKey("ProdId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProdId = 1,
                            ProdName = "Car",
                            ProdPrice = 300.0
                        },
                        new
                        {
                            ProdId = 2,
                            ProdName = "Smartphone",
                            ProdPrice = 99.989999999999995
                        },
                        new
                        {
                            ProdId = 3,
                            ProdName = "Watch",
                            ProdPrice = 30.5
                        });
                });

            modelBuilder.Entity("P4.Model.Sale", b =>
                {
                    b.Property<int>("SaleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CustId")
                        .HasColumnType("int");

                    b.Property<string>("SaleStatus")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SaleId");

                    b.HasIndex("CustId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("P4.Model.SaleWithProduct", b =>
                {
                    b.Property<int>("SaleId")
                        .HasColumnType("int");

                    b.Property<int>("ProdId")
                        .HasColumnType("int");

                    b.Property<int>("Qty")
                        .HasColumnType("int");

                    b.HasKey("SaleId", "ProdId");

                    b.HasIndex("ProdId");

                    b.ToTable("SaleWithProducts");
                });

            modelBuilder.Entity("P4.Model.Basket", b =>
                {
                    b.HasOne("P4.Model.Customer", "Customer")
                        .WithMany("Baskets")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("P4.Model.BasketWithProduct", b =>
                {
                    b.HasOne("P4.Model.Basket", "Basket")
                        .WithMany("BasketWithProducts")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P4.Model.Product", "Product")
                        .WithMany("BasketWithProducts")
                        .HasForeignKey("ProdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("P4.Model.Feedback", b =>
                {
                    b.HasOne("P4.Model.Customer", "Customer")
                        .WithMany("Feedbacks")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("P4.Model.Sale", b =>
                {
                    b.HasOne("P4.Model.Customer", "Customer")
                        .WithMany("Sales")
                        .HasForeignKey("CustId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("P4.Model.SaleWithProduct", b =>
                {
                    b.HasOne("P4.Model.Product", "Product")
                        .WithMany("SaleWithProducts")
                        .HasForeignKey("ProdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("P4.Model.Sale", "Sale")
                        .WithMany("SaleWithProducts")
                        .HasForeignKey("SaleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Sale");
                });

            modelBuilder.Entity("P4.Model.Basket", b =>
                {
                    b.Navigation("BasketWithProducts");
                });

            modelBuilder.Entity("P4.Model.Customer", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("Feedbacks");

                    b.Navigation("Sales");
                });

            modelBuilder.Entity("P4.Model.Product", b =>
                {
                    b.Navigation("BasketWithProducts");

                    b.Navigation("SaleWithProducts");
                });

            modelBuilder.Entity("P4.Model.Sale", b =>
                {
                    b.Navigation("SaleWithProducts");
                });
#pragma warning restore 612, 618
        }
    }
}
